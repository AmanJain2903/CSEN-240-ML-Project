# -*- coding: utf-8 -*-
"""Testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q_CLWdzw6i_eYZ2dsCApQIWiK4e4aOwo

# IMPORTS
"""

import tensorflow as tf
from sklearn.metrics import classification_report, precision_recall_curve, confusion_matrix
import numpy as np
import matplotlib.pyplot as plt
import os
import seaborn as sns
from PIL import Image
from sklearn.preprocessing import label_binarize
import tensorflow as tf
from tensorflow.keras.metrics import Precision, Recall, AUC
from sklearn.metrics import f1_score
import json
import gc

"""# EVALUATION FUNCTIONS"""

def customPredict(yPred, thresholds):
    predictions = np.zeros_like(yPred)
    for i in thresholds.keys():
        threshold = thresholds[i]
        predictions[:, i] = (yPred[:, i] >= threshold).astype(int)
    predictions = np.argmax(predictions * yPred, axis=1)
    return predictions

def evaluateTensorflowModelBestThresholds(model, testDataset, thresholds, categories):
    test_labels = []
    for xBatch, yBatch in testDataset:
        test_labels.extend(np.argmax(yBatch, axis=1))
    predictions = customPredict(model.predict(testDataset), thresholds)

    report = classification_report(test_labels, predictions, target_names=categories)
    print(report)
    return test_labels, predictions

def evaluateTensorflowModel(model, testDataset, categories):

    test_labels = []
    for xBatch, yBatch in testDataset:
        test_labels.extend(np.argmax(yBatch, axis=1))
    predictions = np.argmax(model.predict(testDataset), axis=1)

    report = classification_report(test_labels, predictions, target_names=categories)
    print(report)
    return test_labels, predictions

"""# DATA PREPARATION"""

dataPath = 'Dataset/'
categories = ["Normal","Osteopenia", "Osteoporosis"]

img_size = (224, 224)
channels = 3
img_shape = (img_size[0], img_size[1], channels)
batch_size = 16

trainDirectory = dataPath + "train"
testDirectory = dataPath + "test"
valDirectory = dataPath + "val"

trainDataset = tf.keras.utils.image_dataset_from_directory(
    trainDirectory,
    labels='inferred',
    label_mode='categorical',
    class_names=categories,
    color_mode='rgb',
    image_size=img_size,
    shuffle=True,
    seed=99,
    validation_split=None,
    batch_size=None,
    subset=None,
)

validDataset = tf.keras.utils.image_dataset_from_directory(
    valDirectory,
    labels='inferred',
    label_mode='categorical',
    class_names=categories,
    color_mode='rgb',
    image_size=img_size,
    shuffle=True,
    seed=99,
    validation_split=None,
    batch_size=None,
    subset=None,
)

testDataset = tf.keras.utils.image_dataset_from_directory(
    testDirectory,
    labels='inferred',
    label_mode='categorical',
    class_names=categories,
    color_mode='rgb',
    image_size=img_size,
    shuffle=True,
    seed=99,
    validation_split=None,
    batch_size=None,
    subset=None,
)

def normalize(image, label):
    image = tf.image.convert_image_dtype(image, tf.float32) / 255.0
    return image, label

trainDataset = trainDataset.map(normalize)
validDataset = validDataset.map(normalize)
testDataset = testDataset.map(normalize)

trainDataset = trainDataset.batch(batch_size).prefetch(tf.data.AUTOTUNE)
validDataset = validDataset.batch(batch_size).prefetch(tf.data.AUTOTUNE)
testDataset = testDataset.batch(batch_size).prefetch(tf.data.AUTOTUNE)

"""# TESTING"""

thresholdsPath = 'Thresholds/'
kerasModelsPath = 'KerasModels/'

"""# Xception (0.93/0.95/0.90)"""

modelName = "Xception"
model = tf.keras.models.load_model(kerasModelsPath + modelName + ".keras")

thresholdsFile = thresholdsPath + modelName + ".json"
with open(thresholdsFile, 'r') as f:
    thresholds = json.load(f)
    thresholds = {int(k): v for k, v in thresholds.items()}

labels, preds = evaluateTensorflowModel(model, testDataset, categories)

labels, preds = evaluateTensorflowModelBestThresholds(model, testDataset,thresholds, categories)

confusion = confusion_matrix(labels, preds)
plt.figure(figsize=(10, 8))
sns.heatmap(confusion, annot=True, fmt='d', cmap='Blues',
            xticklabels=categories,
            yticklabels=categories)
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')

"""# VGG16 (0.92/0.94/0.87)"""

modelName = "VGG16"
model = tf.keras.models.load_model(kerasModelsPath + modelName + ".keras")

thresholdsFile = thresholdsPath + modelName + ".json"
with open(thresholdsFile, 'r') as f:
    thresholds = json.load(f)
    thresholds = {int(k): v for k, v in thresholds.items()}

labels, preds = evaluateTensorflowModel(model, testDataset, categories)

labels, preds = evaluateTensorflowModelBestThresholds(model, testDataset, thresholds, categories)

confusion = confusion_matrix(labels, preds)
plt.figure(figsize=(10, 8))
sns.heatmap(confusion, annot=True, fmt='d', cmap='Blues',
            xticklabels=categories,
            yticklabels=categories)
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')

"""# DenseNet201 (0.94/0.96/0.92)"""

modelName = "DenseNet201"
model = tf.keras.models.load_model(kerasModelsPath + modelName + ".keras")

thresholdsFile = thresholdsPath + modelName + ".json"
with open(thresholdsFile, 'r') as f:
    thresholds = json.load(f)
    thresholds = {int(k): v for k, v in thresholds.items()}

labels, preds = evaluateTensorflowModel(model, testDataset, categories)

labels, preds = evaluateTensorflowModelBestThresholds(model, testDataset, thresholds, categories)

confusion = confusion_matrix(labels, preds)
plt.figure(figsize=(10, 8))
sns.heatmap(confusion, annot=True, fmt='d', cmap='Blues',
            xticklabels=categories,
            yticklabels=categories)
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')

"""# InceptionResNetV2 (0.92/0.96/0.89)"""

modelName = "InceptionResNetV2"
model = tf.keras.models.load_model(kerasModelsPath + modelName + ".keras")

thresholdsFile = thresholdsPath + modelName + ".json"
with open(thresholdsFile, 'r') as f:
    thresholds = json.load(f)
    thresholds = {int(k): v for k, v in thresholds.items()}

labels, preds = evaluateTensorflowModel(model, testDataset, categories)

labels, preds = evaluateTensorflowModelBestThresholds(model, testDataset, thresholds, categories)

confusion = confusion_matrix(labels, preds)
plt.figure(figsize=(10, 8))
sns.heatmap(confusion, annot=True, fmt='d', cmap='Blues',
            xticklabels=categories,
            yticklabels=categories)
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')

"""# VotingEnsemble (0.95/0.97/0.93)"""

modelNames = os.listdir(kerasModelsPath)

def ensembleModels(predictedClasses):
    votedPredictions = []
    numModels = len(predictedClasses)
    samples = len(predictedClasses[0])
    for i in range(samples):
        count0, count1, count2 = 0, 0, 0
        for j in range(numModels):
            if predictedClasses[j][i] == 0:
                count0 += 1
            elif predictedClasses[j][i] == 1:
                count1 += 1
            else:
                count2 += 1
        if count0 > count1 and count0 > count2:
            votedPredictions.append(0)
        elif count1 > count0 and count1 > count2:
            votedPredictions.append(1)
        else:
            votedPredictions.append(2)
    return votedPredictions

def customPredict(yPred, thresholds):
    predictions = np.zeros_like(yPred)
    for i in thresholds.keys():
        threshold = thresholds[i]
        predictions[:, i] = (yPred[:, i] >= threshold).astype(int)
    predictions = np.argmax(predictions * yPred, axis=1)
    return predictions

def predict(modelNames, testDataset):
    predictedClasses = []
    for modelName in modelNames:
        name = modelName.split('.')[0]
        modelPath = kerasModelsPath + modelName
        model = tf.keras.models.load_model(modelPath)
        predictions = model.predict(testDataset)
        thresholdPath = thresholdsPath + name + '.json'
        with open(thresholdPath, 'r') as f:
            threshold = json.load(f)
            threshold = {int(k): v for k, v in threshold.items()}
        predicted = customPredict(predictions, threshold)
        predictedClasses.append(predicted)
        tf.keras.backend.clear_session()
        del model
        gc.collect()
    return ensembleModels(predictedClasses)

yTrue = []
for xBatch, yBatch in testDataset:
    yTrue.extend(np.argmax(yBatch.numpy(), axis=1))

yPred = predict(modelNames, testDataset)

report = classification_report(yTrue, yPred, target_names=categories)
print(report)

confusion = confusion_matrix(yTrue, yPred)
plt.figure(figsize=(10, 8))
sns.heatmap(confusion, annot=True, fmt='d', cmap='Blues',
            xticklabels=categories,
            yticklabels=categories)
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')